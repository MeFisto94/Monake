apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'idea'

mainClassName='com.jmonkeyengine.monake.Main'

repositories {
    maven { url 'https://jitpack.io' }
    mavenLocal()
    jcenter()
}

ext.jmeVersion = "3.2.2-stable"

project(":assets") {
    apply plugin: "java"
    
    buildDir = rootProject.file("build/assets")
    
    sourceSets {
        main {
            resources {
                srcDir '.'
            }
        }
    }    
}

dependencies {
 
    /*// Need at least basic JME
    compile("org.jmonkeyengine:jme3-core:$jmeVersion") {
        // For some reason if I don't do this then it picks up alpha4 instead
        // of beta2-SNAPSHOT.
        force = true
    }*/

    // You need that to trigger a new build at jitpack:
    // implementation 'com.github.MeFisto94:jMonkeyEngine:fix-gltf-exporter-bug-SNAPSHOT'

    compile 'com.github.MeFisto94.jmonkeyengine:jme3-core:fix-gltf-exporter-bug-SNAPSHOT'
    compile 'com.github.MeFisto94.jmonkeyengine:jme3-desktop:fix-gltf-exporter-bug-SNAPSHOT'
    compile 'com.github.MeFisto94.jmonkeyengine:jme3-bullet:fix-gltf-exporter-bug-SNAPSHOT'
    compile 'com.github.MeFisto94.jmonkeyengine:jme3-bullet-native:fix-gltf-exporter-bug-SNAPSHOT'
    compile 'com.github.MeFisto94.jmonkeyengine:jme3-lwjgl:fix-gltf-exporter-bug-SNAPSHOT'
    compile 'com.github.MeFisto94.jmonkeyengine:jme3-networking:fix-gltf-exporter-bug-SNAPSHOT'
    compile 'com.github.MeFisto94.jmonkeyengine:jme3-plugins:fix-gltf-exporter-bug-SNAPSHOT'
    /*compile "org.jmonkeyengine:jme3-desktop:$jmeVersion"
    compile "org.jmonkeyengine:jme3-bullet:$jmeVersion"
    compile "org.jmonkeyengine:jme3-bullet-native:$jmeVersion"
    compile "org.jmonkeyengine:jme3-lwjgl:$jmeVersion"
    compile("org.jmonkeyengine:jme3-networking:$jmeVersion") {
        force = true;
    }*/
 
    // We definitely want a UI
    compile "com.simsilica:lemur:1.9.1"
    compile "com.simsilica:lemur-proto:1.8.1"

    // And our base code for sim-etheral, SiO2, etc.
    // (many of these need to be built locally and 'gradle install'ed as of this writing)
    // Note: Paul is wrong, there is jitpack and in the meantime all are published to mavenCentral
    implementation 'com.github.jMonkeyEngine-Contributions:zay-es:59e71e2cac'
    implementation 'com.github.MeFisto94:SiO2:a0238f3ef9'
    compile 'com.github.MeFisto94:SiO2:a0238f3ef9:sources'
    compile 'com.github.MeFisto94:SiO2:a0238f3ef9:javadoc'

    //compile "com.simsilica:sio2:1.2.0"
    compile "com.simsilica:sim-math:1.2.0"
    compile "com.simsilica:sim-ethereal:1.3.0"

    // Standard utility stuff, required by Lemur etc anyway
    compile 'com.google.guava:guava:19.0'
    compile 'org.slf4j:slf4j-api:1.7.13'
    runtime 'org.apache.logging.log4j:log4j-slf4j-impl:2.5'
    
    runtime project(':assets')    
}

task wrapper(type: Wrapper) {
}

task runServer(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "com.jmonkeyengine.monake.net.server.GameServer"
    jvmArgs '-Dlog4j.configurationFile=server-log4j2.xml'
    standardInput = System.in
}

// Create a custom server start script in the distribution
task serverStartScript(type: CreateStartScripts) {
    mainClassName = "com.jmonkeyengine.monake.net.server.GameServer"
    applicationName = "server"
    outputDir = new File(project.buildDir, 'scripts')
    classpath = jar.outputs.files + project.configurations.runtime
    defaultJvmOpts = ['-Dlog4j.configurationFile=server-log4j2.xml']
}

/*applicationDistribution.into("bin") {
    from(serverStartScript)
    fileMode = 0755
}*/

// I think this is ultimately clearer than the above
distributions {
    main {
        contents {
            from(serverStartScript) {
                into "bin"
            }
        }
    }
}

// Either way we end up with dupes if we don't do this
distZip {
    duplicatesStrategy = 'exclude'
}
